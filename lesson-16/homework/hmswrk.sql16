--1
WITH RECURSIVEQUERY AS(
SELECT 1 AS NUMBERS
UNION ALL
SELECT 
NUMBERS+1
FROM RECURSIVEQUERY
WHERE NUMBERS<1000)

SELECT *FROM RECURSIVEQUERY
OPTION(MAXRECURSION 1000)

--2
SELECT TOTALSALES, FIRSTNAME+' '+LASTNAME AS FULLNAME FROM EMPLOYEES E
JOIN
(SELECT EMPLOYEEID, SUM(SALESAMOUNT) AS TOTALSALES 
FROM SALES
GROUP BY EmployeeID) AS S ON E.EMPLOYEEID=S.EMPLOYEEID

--3
WITH CTE AS(
SELECT AVG(SALARY) AS AVERAGESALARY FROM EMPLOYEES)

SELECT CONCAT(FIRSTNAME, ' ', LASTNAME) FULLNAME, SALARY, AVERAGESALARY FROM EMPLOYEES E
CROSS JOIN CTE 

--4
SELECT P.PRODUCTNAME, S.MAXSALES FROM PRODUCTS P JOIN
(SELECT PRODUCTID, MAX(SALESAMOUNT) AS MAXSALES FROM SALES 
GROUP BY PRODUCTID) AS S 
ON P.PRODUCTID=S.PRODUCTID

--5
With doublenumber as(
select 1 as numbers
union all
select numbers*2
from doublenumber
where numbers*2<1000000)

select *from doublenumber
option(maxrecursion 100)

--6
WITH CTE2 AS
(SELECT EMPLOYEEID, COUNT(SALESID) AS NUMBEROFSALES FROM SALES GROUP BY EMPLOYEEID HAVING COUNT(SALESID)>5) 

SELECT FIRSTNAME+' '+LASTNAME AS FULLNAME, E.EMPLOYEEID, S.NUMBEROFSALES
FROM EMPLOYEES E JOIN CTE2 S ON E.EMPLOYEEID=S.EMPLOYEEID

--7
WITH CTE3 AS(
SELECT SALESAMOUNT, PRODUCTID FROM SALES WHERE SalesAmount>500)

SELECT P.PRODUCTID, C.SALESAMOUNT, PRODUCTNAME FROM PRODUCTS P JOIN
CTE3 C ON P.PRODUCTID=C.PRODUCTID
--8
WITH CTE4 AS(
SELECT AVG(SALARY) AS AVGSALARY FROM EMPLOYEES) 

SELECT E.EMPLOYEEID, A.AVGSALARY, E.SALARY FROM EMPLOYEES E CROSS
JOIN CTE4 A WHERE E.Salary>A.AVGSALARY
--MEDIUM TASKS
--1
SELECT TOP 5
E.FIRSTNAME+' '+E.LASTNAME AS FULLNAME, S.ORDERSCOUNT
FROM EMPLOYEES E JOIN
(SELECT EMPLOYEEID, COUNT(SALESID) AS ORDERSCOUNT FROM SALES GROUP BY EMPLOYEEID) S
ON E.EMPLOYEEID=S.EMPLOYEEID ORDER BY S.ORDERSCOUNT DESC

--2

SELECT P.PRODUCTNAME,  SUM(S.TotalSales) AS TotalCategorySales FROM PRODUCTS P JOIN
(SELECT PRODUCTID, SUM(SALESAMOUNT) AS TOTALSALES FROM SALES GROUP BY PRODUCTID) S
ON P.ProductID=S.PRODUCTID GROUP BY ProductName


--3
WITH FactorialCTE AS (
    SELECT 
        N.Number,
        1 AS Step,
        1 AS FactorialValue
    FROM Numbers1 N
    UNION ALL
    SELECT 
        F.Number,
        F.Step + 1,
        F.FactorialValue * (F.Step + 1)
    FROM FactorialCTE F
    WHERE F.Step + 1 <= F.Number
)
SELECT 
    Number,
    MAX(FactorialValue) AS Factorial
FROM FactorialCTE
GROUP BY Number
ORDER BY Number;
--5

with cte7 as(
SELECT DATEPART(MONTH, SALEDATE) SALEMONTH,
DATEPART(YEAR, SALEDATE) SALEYEAR,
SUM(SALESAMOUNT) AS TOTALSALES
FROM SALES
GROUP BY DATEPART(MONTH, SALEDATE), DATEPART(YEAR, SALEDATE))

,CTE8 AS
(SELECT SALEMONTH, SALEYEAR, TOTALSALES,
LAG(TOTALSALES) OVER(ORDER BY SALEMONTH, SALEYEAR) AS PREVIOUSSALES FROM CTE7)

SELECT SALEMONTH, SALEYEAR, TOTALSALES, PREVIOUSSALES, TOTALSALES-ISNULL(PREVIOUSSALES,0) AS SALESDIFFERENCE
FROM CTE8

--6


SELECT 
EMPLOYEES. EMPLOYEEID, FIRSTNAME+' '+LASTNAME AS FULLNAME 
FROM EMPLOYEES WHERE NOT EXISTS 
(SELECT 1 FROM(
SELECT 
EMPLOYEEID, 
DATEPART(QUARTER, SALEDATE) QUARTER, SUM(SALESAMOUNT) AS TOTALSALES 
FROM SALES 
GROUP BY EMPLOYEEID, DATEPART(QUARTER, SALEDATE) HAVING SUM(SALESAMOUNT)<=45000) AS BADSALES
WHERE EMPLOYEES.EMPLOYEEID=BADSALES.EMPLOYEEID)

--DIFFICULT TASKS
--2

SELECT *
FROM FindSameCharacters
WHERE 
    Vals IS NOT NULL
    AND LEN(Vals) > 1
    AND LEN(REPLACE(Vals, LEFT(Vals, 1), '')) = 0;
--3
DECLARE @n INT = 5;

WITH Numbers AS (
    SELECT 1 AS Num, CAST('1' AS VARCHAR(MAX)) AS Sequence
    UNION ALL
    SELECT Num + 1, Sequence + CAST(Num + 1 AS VARCHAR)
    FROM Numbers
    WHERE Num + 1 <= @n
)
SELECT Sequence
FROM Numbers;

--4
SELECT 
    E.EmployeeID,
    E.FirstName + ' ' + E.LastName AS FullName,
    S.TotalSales
FROM Employees E
JOIN (
SELECT 
        EmployeeID,
        SUM(SalesAmount) AS TotalSales
    FROM Sales
    WHERE SaleDate >= DATEADD(MONTH, -6, (SELECT MAX(SaleDate) FROM Sales))
    GROUP BY EmployeeID
) AS S ON E.EmployeeID = S.EmployeeID
WHERE S.TotalSales = (
SELECT MAX(SumSales)
FROM (
SELECT 
SUM(SalesAmount) AS SumSales
        FROM Sales
        WHERE SaleDate >= DATEADD(MONTH, -6, (SELECT MAX(SaleDate) FROM Sales))
        GROUP BY EmployeeID
    ) AS MaxSales
);
